import {
  Action,
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { UserService } from 'src/crud/user/user.service';
import { Telegraf } from 'telegraf';
import { mainButtons } from './buttons/main.buttons';
import { settingsButtons } from './buttons/settings.buttons';
import { Context } from './interfaces/context.interface';
import { userReply } from './user.reply';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly userService: UserService,
  ) {}
  @Start()
  async start(ctx: Context) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ Kireev Dev', mainButtons);
  }

  @Action('checkMyId')
  async checkMyId(ctx: Context) {
    await ctx.replyWithHTML(
      `<b>–í–∞—à ID: </b><code>${ctx.session.telegramId}</code>`,
      settingsButtons,
    );
  }

  @Action('main')
  async main(ctx: Context) {
    await ctx.reply('–ú–µ–Ω—é', mainButtons);
  }

  @Hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
  async settings(ctx: Context) {
    if (!ctx.session.telegramId) {
      ctx.session.telegramId = ctx.message.from.id;
    }

    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingsButtons);
  }

  @Hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
  async myProfile(ctx: Context) {
    if (!ctx.session.telegramId) {
      ctx.session.telegramId = ctx.message.from.id;
    }

    if (!ctx.session.email) {
      ctx.session.type = 'write-email';
      await ctx.reply(
        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      );
    } else {
      ctx.session.type = 'default';
      const user = await this.userService.getUserByEmail(ctx.session.email);
      if (
        user.private.telegramId &&
        user.private.telegramId === ctx.message.from.id
      ) {
        await ctx.replyWithHTML(`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:${userReply(user)}`);
      } else {
        ctx.session.type = 'write-email';
        await ctx.reply(
          '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        );
      }
    }
  }

  @On('text')
  async getUserByEmail(@Message('text') email: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) {
      ctx.session.type = 'default';
    }

    if (ctx.session.type === 'write-email') {
      const user = await this.userService.getUserByEmail(email);

      if (user) {
        user.private.telegramId = ctx.session.telegramId;
        this.userService.updateUserByEmail(email, user);
        ctx.session.email = email;
        await ctx.replyWithHTML(
          `–¢–µ–ª–µ–≥—Ä–∞–º —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.${userReply(user)}`,
        );
      } else {
        ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω üòï');
      }
    }
  }
}
